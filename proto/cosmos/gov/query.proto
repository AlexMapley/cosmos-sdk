syntax = "proto3";
package cosmos.gov;

import "cosmos/query/pagination.proto";
import "gogoproto/gogo.proto";
import "cosmos/gov/gov.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/gov/types";

service Query {
  // Proposals queries all proposals.
  rpc Proposals (QueryProposalsRequest) returns (QueryProposalsResponse) {}

  // Votes queries votes of a given proposal
  rpc Votes (QueryProposalRequest) returns (QueryVotesResponse) {}

  // Deposits returns all deposits of a single proposal
  rpc Deposits(QueryProposalRequest) returns (QueryDepositsResponse) {}
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method
message QueryProposalsRequest {
  // status of the proposals.
  int32 proposal_status = 1;
  
  // Voter address for the proposals.
  bytes voter = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"]; 

  // Deposit addresses from the proposals.
  bytes depositor = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];

  cosmos.query.PageRequest req = 4;
}

message QueryProposalsResponse {
  repeated cosmos.gov.Proposal proposals = 1 [(gogoproto.nullable) = false];

  cosmos.query.PageResponse res = 2;
}

message QueryProposalRequest {
  // unique id of the proposal
  uint64 proposal_id = 1;

  cosmos.query.PageRequest req = 2;
}

message QueryVotesResponse {
  repeated cosmos.gov.Vote votes = 1 [(gogoproto.nullable) = false];

  cosmos.query.PageResponse res = 2;
}

message QueryDepositsResponse {
  repeated cosmos.gov.Deposit deposits = 1 [(gogoproto.nullable) = false];

  cosmos.query.PageResponse res = 2;
}